{"version":3,"sources":["services/TransformNumbers.ts","components/Row.tsx","components/Matrix.tsx","components/Game.tsx","util/random.ts","config/config.ts","App.tsx","index.tsx"],"names":["calculate","numbers","i","j","sum","getNeighbors","forEach","neighbor","getValue","length","Row","props","getStyle","number","cellSize","style","row","map","getGrids","Matrix","r","getRows","Game","React","n_rows","n_columns","res","push","Math","round","random","getRandomMatrix","rows","columns","setNumbers","intervalId","setInterval","num","transformField","interval","clearInterval","calculateCellSize","setCellSize","min","window","innerHeight","innerWidth","addEventListener","removeEventListener","App","useState","start","setStart","setRow","className","flex","action","paddingTop","type","id","max","value","onChange","event","parseInt","target","onClick","name","href","src","width","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86d7012c.chunk.js","sourcesContent":["export function transformField(numbers: number[][]): number[][] {\r\n    const res: number[][] = [];\r\n    for (let i: number = 0; i < numbers.length; i++) {\r\n        const row: number[] = [];\r\n        for (let j: number = 0; j < numbers[i].length; j++) {\r\n            row.push(calculate(numbers, i, j));\r\n        }\r\n        res.push(row);\r\n    }\r\n    return res;\r\n}\r\n\r\nfunction calculate(numbers: number[][], i: number, j: number): number {\r\n    let sum: number = 0;\r\n    getNeighbors(i, j).forEach((neighbor) => {\r\n        sum += getValue(numbers, ...neighbor);\r\n    })\r\n    if (numbers[i][j] === 1) { //was alive cell\r\n        return sum === 3 || sum === 2 ? 1 : 0;\r\n    } else { //was dead cell\r\n        return sum === 3 ? 1 : 0;\r\n    }\r\n}\r\n\r\nfunction getValue(numbers: number[][], i: number, j: number): number {\r\n    if (i < 0 || j < 0 || i >= numbers.length || j >= numbers[i].length) return 0;\r\n    else return numbers[i][j];\r\n}\r\n\r\nfunction getNeighbors(i: number, j: number): point[] {\r\n    return [[i,     j - 1],\r\n            [i,     j + 1],\r\n            [i - 1, j],\r\n            [i + 1, j],\r\n            [i - 1, j - 1],\r\n            [i + 1, j + 1],\r\n            [i - 1, j + 1],\r\n            [i + 1, j - 1]]\r\n}\r\n\r\ntype point = [number, number];","import React from 'react'\r\n\r\nexport default function Row(props: rowProps) {\r\n    function getStyle(number: number) {\r\n        return {\r\n            \"backgroundColor\": number === 1 ? \"black\" : \"lime\",\r\n            \"border\": \"solid 1px gray\",\r\n            \"width\": props.cellSize,\r\n            \"height\": props.cellSize\r\n        };\r\n    }\r\n\r\n    function getGrids() {\r\n        let j = 0;\r\n        return props.row.map(number => <div key={j++} style={getStyle(number)}/>)\r\n    }\r\n\r\n    return <div style={{\"display\": \"flex\", \"flexDirection\": \"row\"}}>\r\n        {getGrids()}\r\n    </div>;\r\n}\r\n\r\ntype rowProps = {\r\n    row: number[],\r\n    cellSize: number,\r\n}","import React from 'react'\r\nimport Row from \"./Row\"\r\n\r\nexport default function Matrix(props: matrixProps){\r\n    function getRows() {\r\n        let i = 0;\r\n        return props.numbers.map(r => <Row key={i++} row={r} cellSize={props.cellSize}/>)\r\n    }\r\n\r\n    return <div style={{\"display\": \"flex\",\r\n        \"flexDirection\": \"column\"}}>\r\n        {getRows()}\r\n    </div>\r\n}\r\n\r\ntype matrixProps = {\r\n    numbers: number[][],\r\n    cellSize: number\r\n}\r\n","import * as React from 'react';\r\n// import TransformNumbers from \"../services/TransformNumbers\";\r\nimport {transformField} from \"../services/TransformNumbers\";\r\nimport {getRandomMatrix} from '../util/random';\r\nimport Matrix from \"./Matrix\";\r\nimport {N_COLUMNS} from \"../config/config\";\r\n\r\nexport default function Game(props: gameProps){\r\n    //matrix as a state and effect\r\n    const [numbers, setNumbers] = React.useState(getRandomMatrix(props.rows || 50, props.columns || 50));\r\n\r\n    React.useEffect(() => {\r\n        const intervalId = setInterval(() => setNumbers(num => transformField(num)), props.interval || 1000);\r\n        return () => clearInterval(intervalId);\r\n    }, [props.interval]);\r\n\r\n    //cellsize is dependent on window size\r\n    const [cellSize, setCellSize] = React.useState(calculateCellSize());\r\n    React.useEffect( () => {\r\n        window.addEventListener('resize', () => {setCellSize(calculateCellSize())});\r\n        return () => window.removeEventListener('resize', () => {setCellSize(calculateCellSize())});\r\n    }, []);\r\n\r\n    function calculateCellSize(){\r\n        return Math.min(window.innerHeight * 0.75, window.innerWidth*0.75)/N_COLUMNS - 1;\r\n    }\r\n\r\n    return <React.Fragment>\r\n        {/*<h1>{props.name}</h1>*/}\r\n        <Matrix numbers={numbers} cellSize={cellSize} />\r\n\r\n    </React.Fragment>;\r\n}\r\n\r\ntype gameProps = {\r\n    rows: number,\r\n    columns: number,\r\n    interval: number,\r\n    name: string,\r\n}","export function getRandomCell() {\r\n    return Math.round(Math.random());\r\n}\r\n\r\nexport function getRandomMatrix(n_rows: number, n_columns: number): number[][] {\r\n    const res: number[][] = [];\r\n    for (let i: number = 0; i < n_columns; i++) {\r\n        const row: number[] = [];\r\n        for (let j = 0; j < n_rows; j++) {\r\n            row.push(getRandomCell());\r\n        }\r\n        res.push(row);\r\n    }\r\n    return res;\r\n}","export const N_COLUMNS = 50;\r\nexport let N_ROWS = 50;\r\nexport const INTERVAL = 1000;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {INTERVAL, N_COLUMNS, N_ROWS} from \"./config/config\";\nimport Game from \"./components/Game\";\nimport {throws} from \"assert\";\n\n\nexport default function App() {\n    const [start, setStart] = useState(false);\n    const [row, setRow] = useState(N_ROWS)\n    const [interval, setInterval] = useState(INTERVAL)\n\n\n    return (\n        <>\n            <div className=\"center-align\" style={{flex: \"1 0 auto\"}}>\n\n                <div className=\"container\">\n                    <div className=\"row\">\n                        {/*    <div className=\"col\">*/}\n                        <h3 className=\"header\">Game of Live</h3>\n                        <h6>Please choose size of field</h6>\n                        <form action=\"#\" style={{\n                            paddingTop: 0\n                        }}>\n                            <p className=\"range-field\">\n                                <input type=\"range\" id=\"test5\" min=\"0\"\n                                       max=\"100\" value={row}\n                                       onChange={(event) => {\n                                           setRow(parseInt(event.target.value))\n                                       }}/>\n                            </p>\n                        </form>\n\n                        <h6>Please choose interval</h6>\n                        <form action=\"#\" style={{\n                            paddingTop: 0\n                        }}>\n                            <p className=\"range-field\">\n                                <input type=\"range\" id=\"test5\" min=\"0\"\n                                       max=\"100\" value={interval}\n                                       onChange={(event) => {\n                                           setInterval(parseInt(event.target.value))\n                                       }}/>\n                            </p>\n                        </form>\n\n\n                        <a className=\"waves-effect waves-light btn\" onClick={() => setStart(true)}>StartGame</a>\n                        <a className=\"waves-effect waves-light btn\" onClick={() => setStart(false)}>StopGame</a>\n\n                        {start && <div style={{paddingTop: 10}}>\n                            <Game name=\"Game of Live\" columns={row} rows={row} interval={interval * 5}/>\n                            {/*<Game name=\"Game of Live\" columns={N_COLUMNS} rows={N_ROWS} interval={INTERVAL}/>*/}\n                            {/*<Game name=\"Game of Live2\" columns={N_COLUMNS} rows={N_ROWS} interval={INTERVAL}/>*/}\n                            {/*<Game name=\"Game of Live3\" columns={N_COLUMNS} rows={N_ROWS} interval={INTERVAL}/>*/}\n                        </div>}\n\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"footer\">\n                <a href=\"https://github.com/Urazof/\">github</a>  2021\n            </div>\n            <div className=\"footer2\">\n           <a href=\"https://rs.school/js/\"><img src=\"https://rs.school/images/rs_school_js.svg\" width=\"100px\"/> </a>\n            </div>\n        </>\n\n\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}